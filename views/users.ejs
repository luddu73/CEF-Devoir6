<%- include('components/layout'); -%>
<body class="min-h-screen flex flex-col overflow-x-hidden">
    <%- include('components/header'); -%>
    <main class="flex flex-1 items-center justify-center w-full">
        <div id="dashboard" class="bg-gray-900 bg-opacity-70 text-white rounded-lg w-11/12 md:w-10/12 lg:w-11/12 shadow-lg flex flex-row overflow-y-auto" style="height: calc(90vh - 90px);"> <!-- Réduit l'espace en haut et en bas (90px pour header et footer) -->

            <!-- Sidebar (menu latéral) -->
            <%- include('components/nav'); -%>

            <!-- Main content area -->
            <div class="flex-1 p-8 text-center">
                <h1 class="text-2xl font-bold">Gestion des utilisateurs</h1>
                <div class="grid grid-cols-2">
                    <section class="col-span-2 m-2 p-4 bg-blue-100 bg-opacity-70 rounded-lg border border-blue-400 shadow-lg overflow-x-auto">
                            <div class="flex items-center p-4 mb-4 text-sm text-green-700 bg-green-100 border-l-4 border-green-500 rounded-lg <% if (typeof message !== 'undefined' && message) { %> block <% } else { %>hidden<% } %> " role="alert">
                                <svg class="w-5 h-5 mr-3" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16Zm3.857-9.809a.75.75 0 0 0-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 1 0-1.06 1.061l2.5 2.5a.75.75 0 0 0 1.137-.089l4-5.5Z" clip-rule="evenodd"></path>
                                </svg>
                                <% if (typeof message !== 'undefined' && message) { %>
                                    <%= message %>
                                    <% message = null; %>
                                <% } %>
                            </div>
                            <div class="flex items-center p-4 mb-4 text-sm text-red-700 bg-red-100 border-l-4 border-red-500 rounded-lg <% if (typeof errorMessage !== 'undefined' && errorMessage) { %> block <% } else { %>hidden<% } %>" role="alert">
                              <svg class="w-5 h-5 mr-3" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16ZM8.28 7.22a.75.75 0 0 0-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 1 0 1.06 1.06L10 11.06l1.72 1.72a.75.75 0 1 0 1.06-1.06L11.06 10l1.72-1.72a.75.75 0 0 0-1.06-1.06L10 8.94 8.28 7.22Z" clip-rule="evenodd"></path>
                              </svg>
                                <% if (typeof errorMessage !== 'undefined' && errorMessage) { %>
                                    <%= errorMessage %>
                                    <% errorMessage = null; %>
                                <% } %>
                            </div>
                        <h2 class="text-blue-900 text-lg font-bold mb-2"><i class="fa-solid fa-users"></i> Liste des utilisateurs</h2>
                        <p class="m-3 text-blue-800">Il y a <strong><% if (users.length > 0) { %> <%= users.length %> <% } else { %>0<% } %></strong> utilisateurs dans notre base de donnée.</p>
                        
                        <table class="min-w-full divide-y divide-gray-300">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th scope="col" class="py-3.5 pr-3 pl-1 xl:pl-4 text-left text-xs xl:text-sm font-semibold text-gray-900 sm:pl-6">Nom d'utilisateur</th>
                                    <th scope="col" class="px-3 py-3.5 text-left text-xs xl:text-sm font-semibold text-gray-900">Email</th>
                                    <th scope="col" class="px-3 py-3.5 text-left text-xs xl:text-sm font-semibold text-gray-900"></th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200 bg-white">
                                <% if (users.length > 0) { users.forEach(function(users) { %>
                                <tr>
                                    <td class="py-4 pr-3 pl-1 xl:pl-4 text-xs xl:text-sm font-medium whitespace-nowrap text-gray-900 sm:pl-6"><%= users.username %></td>
                                    <td class="px-3 py-4 text-xs xl:text-sm whitespace-nowrap text-gray-500"><%= users.email %></td>
                                    <td class="px-3 py-4 text-xs xl:text-sm whitespace-nowrap text-white">
                                        <span class="isolate inline-flex rounded-md shadow-xs">
                                            <a href="/users/<%= users.email %>">
                                                <button type="button" class="relative inline-flex items-center rounded-l-md bg-green-500 px-2 py-2 text-white ring-1 ring-gray-300 ring-inset hover:bg-green-400 focus:z-10">
                                                    <i class="fa-solid fa-pen-to-square"></i>
                                                </button>
                                            </a>
                                            <button onclick="openModalDelete('<%= users.username %>', '<%= users.email %>')" type="button" class="relative -ml-px inline-flex items-center rounded-r-md bg-red-500 px-2 py-2 ring-1 ring-gray-300 ring-inset hover:bg-red-400 focus:z-10">
                                                <i class="fa-solid fa-trash"></i>
                                            </button>
                                        </span>
                                    </td>
                                </tr>
                                <% }); 
                                } else { %> 
                                <tr>
                                    <td colspan="3" class="py-4 pr-3 pl-1 xl:pl-4 text-xs xl:text-sm font-medium whitespace-nowrap text-gray-900 sm:pl-6 text-center">Aucun utilisateur trouvé.</td>
                                </tr>
                                <% } %>
                                <tr>
                                    <td colspan="3" class="py-4 pr-3 pl-1 xl:pl-4 text-xs xl:text-sm font-medium whitespace-nowrap text-gray-900 sm:pl-6 text-center">
                                        <button onclick="openModal()" type="button" class="inline-flex items-center gap-x-2 rounded-md bg-blue-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-xs hover:bg-blue-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600">
                                            <i class="fa-solid fa-user-plus"></i> Créer un utilisateur
                                        </button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </section>
                </div>
            </div>
        </div>


        <div id="createUserModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center <% if (typeof errorMessageCreate !== 'undefined' && errorMessageCreate) { %>block<% } else { %>hidden<% } %>">
            <div id="modalBackdrop" onclick="closeModal()" class="absolute inset-0 z-10"></div>
            <div id="modalContent" class="bg-white p-6 rounded-lg shadow-lg max-w-5xl w-full text-center z-20">
              <h2 class="text-2xl font-bold mb-4">Créer un utilisateur</h2>
                <% if (typeof errorMessageCreate !== 'undefined' && errorMessageCreate) { %>
                <div class="flex items-center p-4 mb-4 text-sm text-red-700 bg-red-100 border-l-4 border-red-500 rounded-lg" role="alert">
                  <svg class="w-5 h-5 mr-3" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16ZM8.28 7.22a.75.75 0 0 0-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 1 0 1.06 1.06L10 11.06l1.72 1.72a.75.75 0 1 0 1.06-1.06L11.06 10l1.72-1.72a.75.75 0 0 0-1.06-1.06L10 8.94 8.28 7.22Z" clip-rule="evenodd"></path>
                  </svg>
                  <%= errorMessageCreate %>
                </div>
                <% } %>
              <form action="/users" method="post" class="flex flex-col gap-2">
                    <div class="relative flex" id="usernameInput">
                        <input id="username" name="username" type="text" placeholder="Nom d'utilisateur" class="w-full px-3 py-2 border rounded" value="<%= session && session.formData && session.formData.username ? session.formData.username : '' %>" required>
                        <i id="usernameErrorIcon" class="fa-solid fa-triangle-exclamation absolute right-3 mt-1 text-red-400 text-3xl" style="display: none;"></i>
                    </div>
                   
                    <div class="relative flex" id="emailInput">
                        <input type="email" name="email" id="email" class="w-full px-3 py-2 border rounded pr-10" placeholder="Email" value="<%= session && session.formData && session.formData.email ? session.formData.email : '' %>" required>
                        <i id="emailErrorIcon" class="fa-solid fa-triangle-exclamation absolute right-3 mt-1 text-red-400 text-3xl" style="display: none;"></i>
                    </div>
                    <div class="relative flex flex-col" id="passwordInput">
                        <input type="password" name="password" id="password" class="w-full px-3 py-2 border rounded pr-10" placeholder="Mot de passe" required>
                        <i id="passwordErrorIcon" class="fa-solid fa-triangle-exclamation absolute right-3 mt-1 text-red-400 text-3xl" style="display: none;"></i>
                    </div>
                    <div class="relative flex flex-col" id="confirmPasswordInput">
                        <input type="password" name="confirmPassword" id="confirmPassword" class="w-full px-3 py-2 border rounded pr-10" placeholder="Confirmer le mot de passe" required>
                        <i id="confirmPasswordErrorIcon" class="fa-solid fa-triangle-exclamation absolute right-3 mt-1 text-red-400 text-3xl" style="display: none;"></i>
                    </div>
                    
                    <button class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full" type="submit">Créer</button>
              </form>
              <button onclick="closeModal()" class="text-red-500 mt-4 block w-full">Annuler</button>
            </div>
        </div>

        <div id="deleteUserModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
            <div id="modalBackdrop" onclick="closeModalDelete()" class="absolute inset-0 z-10"></div>
            <div id="modalContent" class="relative bg-white p-6 rounded-lg shadow-lg max-w-md w-full text-center z-20">
              <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left flex flex-col items-center justify-center">
                <div class="top-2 left-2 flex flex-col items-center justify-center w-8 h-8 bg-red-100 rounded-full">
                  <svg class="w-6 h-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z" />
                  </svg>
                </div>
                <h3 class="text-base font-semibold text-gray-900" id="modal-title"></h3>
              </div>
              <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left flex flex-col">
                <div class="mt-2">
                  <p id="modal-message" class="text-sm text-gray-500"></p>
                </div>
              </div>
              <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                <button id="modal-link" type="button" class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-xs hover:bg-red-500 sm:ml-3 sm:w-auto">Confirmer</button>
                <button onclick="closeModalDelete()" type="button" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 shadow-xs ring-gray-300 ring-inset hover:bg-gray-50 sm:mt-0 sm:w-auto">Annuler</button>
              </div>
            </div>
        </div>
        

        <script>
            
            function openModal() {
              document.getElementById("createUserModal").classList.remove("hidden");
            }
            
            function closeModal() {
              document.getElementById("createUserModal").classList.add("hidden");
            }

            function openModalDelete(username, email) {
                const title = document.getElementById("modal-title");
                const message = document.getElementById("modal-message");
                const link = document.getElementById("modal-link");

                // Mettez à jour le contenu du titre et du message en fonction de l'utilisateur
                title.innerText = `Supprimer l'utilisateur ${username}`;
                message.innerText = `Êtes-vous sûr de vouloir supprimer l'utilisateur ${username} ? Cette action est irréversible.`;
                link.onclick = function() {
                    deleteUser(email);
                };
                // Affiche la modale
                document.getElementById("deleteUserModal").classList.remove("hidden");
            }
            
            function closeModalDelete() {
              document.getElementById("deleteUserModal").classList.add("hidden");
            }

            function deleteUser(email) {
                // Effectuer la requête pour supprimer l'utilisateur
                fetch(`/users/${email}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = `/users?success=DEL`;
                    } else {
                        window.location.href = `/users?error=${data.errorInfo}`;
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    window.location.href = `/error?errorCode=500&title=Erreur+Interne&message=Une+erreur+inattendue+est+survenue`;
                });
            }

            const checkUsername = (username) => {
                const usernameRegex  = /^[A-Za-z]+$/;
                return usernameRegex.test(username);
            };
            const checkEmail = (email) => {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return emailRegex.test(email);
            };
            const checkPassword = (password) => {
                const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$/;
                return passwordRegex.test(password);
            };
            const checkPasswordLength = (password) => {
                return password.length >= 8;
            };

            document.addEventListener("DOMContentLoaded", () => {
                const form = document.querySelector("form");
                const usernameInput = document.getElementById("username");
                const emailInput = document.getElementById("email");
                const passwordInput = document.getElementById("password");
                const confirmPassword = document.getElementById("confirmPassword");

                // Fonction pour valider un champ individuellement
                const validateInput = (inputElement, validationFunction, errorId, errorMessage) => {
                    if (!validationFunction(inputElement.value)) {
                        addErrorInfo(inputElement.id, `${inputElement.id}ErrorIcon`, `${inputElement.id}Input`, errorMessage);
                        return false;
                    } else {
                        removeErrorInfo(inputElement.id, `${inputElement.id}ErrorIcon`);
                        return true;
                    }
                };

                // Contrôle individuel des champs
                if (usernameInput) {
                    usernameInput.addEventListener("input", () => {
                        validateInput(usernameInput, value => value !== "" && checkUsername(value), "username", "Vous devez saisir un nom d'utilisateur (uniquement des lettres).");
                    });
                }
                if (emailInput) {
                    emailInput.addEventListener("input", () => {
                        validateInput(emailInput, checkEmail, "email", "La présentation de votre email n'est pas valide."); 
                    });
                }
                if (passwordInput) {
                    passwordInput.addEventListener("input", () => {
                        validateInput(passwordInput, value => checkPassword(value) && checkPasswordLength(value), "password", "Votre mot de passe doit avoir minimum 8 caractères dont 1 Majuscule, 1 minuscule, 1 chiffre et 1 caractère spécial.");
                    });
                }
                if (confirmPassword) {
                    confirmPassword.addEventListener("input", () => {
                        validateInput(confirmPassword, value => passwordInput.value === value, "confirmPassword", "Les mots de passe ne correspondent pas.");
                    });
                }


                // On vérifie le formulaire avant envoi
                const validateForm = () => {
                    let isValid = true;

                    if (!validateInput(usernameInput, value => value !== "" && checkUsername(value), "username", "Vous devez saisir un nom d'utilisateur valide.")) isValid = false;
                    if (!validateInput(emailInput, checkEmail, "email", "La présentation de votre email n'est pas valide.")) isValid = false;
                    if (!validateInput(passwordInput, value => checkPassword(value) && checkPasswordLength(value), "password", "Votre mot de passe doit avoir minimum 8 caractères.")) isValid = false;
                    if (!validateInput(confirmPassword, value => passwordInput.value === value, "confirmPassword", "Les mots de passe ne correspondent pas.")) isValid = false;
                    return isValid;
                };

                // Écouteur sur le submit du formulaire
                form.addEventListener("submit", (event) => {
                    event.preventDefault(); // Empêche l'envoi du formulaire si les champs ne sont pas tous ok
                    console.log("Validation en cours... ...");
                    if (validateForm()) {
                        console.log("Validation réussie.");
                        form.submit(); // Si tout ok, on envois !
                    } else {
                        console.log("Validation échouée. Formulaire non envoyé.");
                    }
                });
            });



            function addErrorInfo(parametre,parametreIcon,parametreForm,texte) // Fonction qui permet d'ajouter une information d'erreur sur le formulaire
            {
                let input = document.getElementById(parametre);
                let inputErrorIcon = document.getElementById(parametreIcon);
                let inputForm = document.getElementById(parametreForm);
                if ( inputErrorIcon.style.display === "none")
                {   
                    input.classList.add("border-red-500");
                    input.classList.add("text-red-500");
                    inputErrorIcon.style.display = "inline-block";
                        
                    let alertDiv = document.createElement("div");
                    let contenuAlertDiv = document.createTextNode(texte); 
                    alertDiv.appendChild(contenuAlertDiv); // Mon texte est enfant de ma nouvelle div
                    alertDiv.setAttribute("class", "text-red-700 text-sm mt-0 top-1 italic"); // J'ajoute à ma div les class
                    alertDiv.setAttribute("id", "invalid"+parametre); // ainsi qu'un ID
                    alertDiv.style.display = "flex"; // Je met à jour le style qui est par défaut sur none
                    inputForm.after(alertDiv); // Ma nouvelle div est ajoutée à la suite de l'input
                    pasok = 1;
                }
            }
            function removeErrorInfo(parametre,parametreIcon) // Fonction qui retire l'information d'erreur sur le formulaire
            {
                let input = document.getElementById(parametre);
                let inputErrorIcon = document.getElementById(parametreIcon);
                if(document.getElementById('invalid'+parametre)) // Si le nom n'est pas vide et un élement à cet ID
                {
                    let invalidDiv = document.getElementById("invalid"+parametre); // Je récupère la div 
                    invalidDiv.remove(); // et l'a supprime

                    input.classList.remove("border-red-500");
                    input.classList.remove("text-red-500");
                    inputErrorIcon.style.display = "none";
                }
            }
          </script>

    </main>
    <%- include('components/footer'); -%>
</body>